<%# app/views/prompts/_form.html.erb %>

<%# Fallbacks (if you prefer, move these into config/initializers/prompt_library.rb) %>
<% default_lib = {
  categories: [
    "Writing & Content", "Marketing & Growth", "Business & Productivity",
    "Code & Tech", "Learning & Knowledge", "Creative & Design", "Personal & Miscellaneous"
  ],
  tones_primary: ["Neutral", "Friendly", "Formal", "Conversational", "Persuasive", "Technical"],
  tones_all: ["Neutral","Friendly","Formal","Conversational","Persuasive","Technical","Informal","Professional","Empathetic","Playful","Academic","Authoritative"],
  formats_primary: ["Paragraph", "Bullet list", "Steps", "Short social post", "Email (subject + body)"],
  formats_all: ["Paragraph","Bullet list","Steps","Short social post","Email (subject + body)","Headline","FAQ","Table","Script","Outline","Poem"]
} %>

<% lib = defined?(PROMPT_LIBRARY) ? PROMPT_LIBRARY : default_lib %>

<%= turbo_frame_tag "prompt_form" do %>
  <% model = local_assigns[:prompt] || @prompt || Prompt.new %>

  <%= form_with model: model, url: prompts_path, scope: :prompt, method: :post, local: false, html: { class: "space-y-4" } do |f| %>
    <div class="mb-3">
      <%= f.label :idea, "Your idea", class: "block text-sm font-medium text-gray-700" %>
      <%= f.text_area :idea,
            value: (defined?(@previous_input) && @previous_input && @previous_input[:idea]) || params.dig(:prompt, :idea) || f.object.try(:idea) || "",
            rows: 6,
            class: "w-full border p-2 rounded",
            placeholder: "Describe the idea or goal for this prompt",
            aria: { describedby: "idea-help" } %>
      <p id="idea-help" class="text-xs text-gray-500 mt-1">Briefly describe the goal so the generated prompt is focused.</p>
    </div>

    <div class="flex gap-2 mb-3">
      <div class="flex-1">
        <%= f.label :category, "Category", class: "sr-only" %>
        <%= f.select :category,
              options_for_select(lib[:categories], (defined?(@previous_input) && @previous_input && @previous_input[:category]) || f.object.try(:category)),
              { include_blank: "Select category" },
              class: "w-full border p-2 rounded",
              aria: { label: "Category" } %>
      </div>

      <div class="w-1/3">
        <%# Primary tone select (shown) %>
        <%= f.label :tone, "Tone", class: "sr-only" %>
        <div class="relative">
          <select id="tone-primary" name="prompt[tone]" class="w-full border p-2 rounded" aria-label="Tone">
            <option value="" disabled <%= "selected" if ((defined?(@previous_input) && @previous_input && @previous_input[:tone]).blank? && f.object.try(:tone).blank?) %>>Select tone</option>
            <% lib[:tones_primary].each do |t| %>
              <% selected = ((defined?(@previous_input) && @previous_input && @previous_input[:tone]) || f.object.try(:tone)) == t %>
              <option value="<%= t %>" <%= "selected" if selected %>><%= t %></option>
            <% end %>
          </select>

          <a href="#" id="toggle-tones" class="absolute right-2 top-2 text-xs underline">More</a>
        </div>

        <%# Advanced/all tone select (hidden by default) %>
        <div id="tone-advanced-wrapper" class="mt-2 hidden">
          <label class="block text-xs text-gray-600 mb-1">All tones</label>
          <select id="tone-advanced" class="w-full border p-2 rounded" aria-label="All tones">
            <option value="">(leave blank to keep primary)</option>
            <% lib[:tones_all].each do |t| %>
              <option value="<%= t %>"><%= t %></option>
            <% end %>
          </select>
        </div>
      </div>

      <div class="w-1/3">
        <%# Primary format select (shown) %>
        <%= f.label :format, "Format", class: "sr-only" %>
        <div class="relative">
          <select id="format-primary" name="prompt[format]" class="w-full border p-2 rounded" aria-label="Format">
            <option value="" disabled <%= "selected" if ((defined?(@previous_input) && @previous_input && @previous_input[:format]).blank? && f.object.try(:format).blank?) %>>Format</option>
            <% lib[:formats_primary].each do |fmt| %>
              <% selected = ((defined?(@previous_input) && @previous_input && @previous_input[:format]) || f.object.try(:format)) == fmt %>
              <option value="<%= fmt %>" <%= "selected" if selected %>><%= fmt %></option>
            <% end %>
          </select>

          <a href="#" id="toggle-formats" class="absolute right-2 top-2 text-xs underline">More</a>
        </div>

        <%# Advanced/all formats (hidden) %>
        <div id="format-advanced-wrapper" class="mt-2 hidden">
          <label class="block text-xs text-gray-600 mb-1">All formats</label>
          <select id="format-advanced" class="w-full border p-2 rounded" aria-label="All formats">
            <option value="">(leave blank to keep primary)</option>
            <% lib[:formats_all].each do |fmt| %>
              <option value="<%= fmt %>"><%= fmt %></option>
            <% end %>
          </select>
        </div>
      </div>
    </div>

    <div class="flex gap-2 items-center mb-3">
      <div class="flex-1">
        <%= f.label :audience, "Audience / Tags", class: "block text-sm text-gray-600" %>
        <%= f.text_field :audience,
              value: (defined?(@previous_input) && @previous_input && @previous_input[:audience]) || params.dig(:prompt, :audience) || f.object.try(:audience) || "",
              placeholder: "e.g. Developers, HR, Small business",
              class: "w-full border p-2 rounded" %>
        <p class="text-xs text-gray-500 mt-1">Comma-separated tags to guide tone and examples.</p>
      </div>

      <div class="w-48">
        <label for="length" class="block text-sm text-gray-600">Output length</label>
        <div class="flex items-center gap-2">
          <select id="length" name="prompt[length]" class="w-full border p-2 rounded" aria-label="Output length">
            <option value="short" <%= "selected" if ((defined?(@previous_input) && @previous_input && @previous_input[:length]) || f.object.try(:length)) == "short" %>>Short</option>
            <option value="medium" <%= "selected" if ((defined?(@previous_input) && @previous_input && @previous_input[:length]) || f.object.try(:length)) == "medium" %>>Medium</option>
            <option value="long" <%= "selected" if ((defined?(@previous_input) && @previous_input && @previous_input[:length]) || f.object.try(:length)) == "long" %>>Long</option>
          </select>
        </div>
      </div>
    </div>

    <div class="flex items-center justify-between">
      <div class="text-sm text-gray-500">Model: General</div>
      <div>
        <%= f.submit (f.object.persisted? ? "Update Prompt" : "Generate Prompt"),
            class: "px-4 py-2 bg-brand text-white rounded hover:bg-brand/80 transition-colors duration-200 cursor-pointer" %>
      </div>
    </div>
  <% end %>
<% end %>

<script>
document.addEventListener("turbo:load", function() {
  // Tone toggling
  const toneToggle = document.getElementById("toggle-tones");
  const toneAdvancedWrapper = document.getElementById("tone-advanced-wrapper");
  const tonePrimary = document.getElementById("tone-primary");
  const toneAdvanced = document.getElementById("tone-advanced");

  if (toneToggle) {
    toneToggle.addEventListener("click", function(e){
      e.preventDefault();
      toneAdvancedWrapper.classList.toggle("hidden");
      this.innerText = toneAdvancedWrapper.classList.contains("hidden") ? "More" : "Less";
    });
  }

  // Format toggling
  const formatToggle = document.getElementById("toggle-formats");
  const formatAdvancedWrapper = document.getElementById("format-advanced-wrapper");
  const formatPrimary = document.getElementById("format-primary");
  const formatAdvanced = document.getElementById("format-advanced");

  if (formatToggle) {
    formatToggle.addEventListener("click", function(e){
      e.preventDefault();
      formatAdvancedWrapper.classList.toggle("hidden");
      this.innerText = formatAdvancedWrapper.classList.contains("hidden") ? "More" : "Less";
    });
  }

  // When advanced options are selected, copy into the visible primary selects (so they submit)
  function copyAdvancedToPrimary(advancedEl, primaryEl) {
    advancedEl.addEventListener("change", function() {
      if (this.value && this.value.length > 0) {
        // if a value chosen in advanced, set it on primary (and ensure it exists as option)
        let v = this.value;
        // ensure primary has an option for value (if not, add it)
        if (![...primaryEl.options].some(o => o.value === v)) {
          const opt = document.createElement("option");
          opt.value = v;
          opt.text = v;
          primaryEl.appendChild(opt);
        }
        primaryEl.value = v;
      }
    });
  }

  if (toneAdvanced && tonePrimary) copyAdvancedToPrimary(toneAdvanced, tonePrimary);
  if (formatAdvanced && formatPrimary) copyAdvancedToPrimary(formatAdvanced, formatPrimary);
});
</script>
